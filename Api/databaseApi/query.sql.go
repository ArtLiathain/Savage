// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package databaseApi

import (
	"context"
	"time"
)

const getRamRows = `-- name: GetRamRows :many
SELECT
    ram.ram_id,
    ram.timestamp,
    ram.usage,
    ram.total,
    ram.usage_percent,
    devices.device_id,
    devices.device_name
FROM
    ram
    JOIN devices ON ram.device_id = devices.device_id
`

type GetRamRowsRow struct {
	RamID        int64
	Timestamp    time.Time
	Usage        float64
	Total        float64
	UsagePercent float64
	DeviceID     int64
	DeviceName   string
}

func (q *Queries) GetRamRows(ctx context.Context) ([]GetRamRowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRamRows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRamRowsRow
	for rows.Next() {
		var i GetRamRowsRow
		if err := rows.Scan(
			&i.RamID,
			&i.Timestamp,
			&i.Usage,
			&i.Total,
			&i.UsagePercent,
			&i.DeviceID,
			&i.DeviceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDeviceIfNotExists = `-- name: InsertDeviceIfNotExists :one
INSERT
OR IGNORE INTO devices (device_id, device_name)
VALUES
    (?, ?) RETURNING device_id, device_name
`

type InsertDeviceIfNotExistsParams struct {
	DeviceID   int64
	DeviceName string
}

func (q *Queries) InsertDeviceIfNotExists(ctx context.Context, arg InsertDeviceIfNotExistsParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, insertDeviceIfNotExists, arg.DeviceID, arg.DeviceName)
	var i Device
	err := row.Scan(&i.DeviceID, &i.DeviceName)
	return i, err
}

const insertRamRow = `-- name: InsertRamRow :exec
INSERT INTO
    ram (device_id, timestamp, usage, total, usage_percent)
VALUES
    (?, ?, ?, ?, ?)
`

type InsertRamRowParams struct {
	DeviceID     int64
	Timestamp    time.Time
	Usage        float64
	Total        float64
	UsagePercent float64
}

func (q *Queries) InsertRamRow(ctx context.Context, arg InsertRamRowParams) error {
	_, err := q.db.ExecContext(ctx, insertRamRow,
		arg.DeviceID,
		arg.Timestamp,
		arg.Usage,
		arg.Total,
		arg.UsagePercent,
	)
	return err
}
